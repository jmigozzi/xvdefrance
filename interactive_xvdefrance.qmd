---
title: "Géographie du XV de France"
subtitle: "Une équipe du monde entier"
author: "Julien Migozzi"
institute: "University of Oxford"
format:
  html:
    echo: false
editor: visual
---

D'où viennent les joueurs du XV de France ?

Cette carte visualise chaque joueur du XV de France selon son lieu de naissance et la date de sa première sélection.

Elle est accompagnée d'un tableau qui recense le nombre d'internationaux pour chaque lieu de naissance, selon la période choisie.

Les données ont été extraites de [Wikipedia](https://fr.wikipedia.org/wiki/Liste_des_s%C3%A9lectionn%C3%A9s_en_%C3%A9quipe_de_France_de_rugby_%C3%A0_XV), puis geocodées via OpenStreetMap.

Bonne exploration !

```{r}
#| echo: false
#| warning: false
#| message: false

library(sf)

library(tidyverse)
xv <- st_read(here::here("data/xvdefrance.gpkg"),  quiet = TRUE)
xv$first_year <- as.numeric(format(xv$first_selection,'%Y'))
# glimpse(xv)
library(geojsonsf)
ojs_define(xv_str = sf_geojson(xv))

```

```{ojs}
//| echo: false
players = JSON.parse(xv_str) 
import {view} from "@neocartocnrs/geoverview"
geo = require("geotoolbox@latest")
bertin = require("bertin")
cartoLight = "https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}@2x.png"
cartoAttr = `&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, &copy; <a href="https://carto.com/attributions">CARTO</a>`

import {interval} from '@mootari/range-slider' 

viewof period = interval([1900, 2023], {
  step: 1,
  min: 1906,
  max: 2023,
  value: [2015, 2023],
  label: 'Période de la première sélection',
})


newplayers = geo.filter(players, (d) => d.first_year > period[0] &
d.first_year < period[1])


VanCircleFoodMap = {

  let width = 1200;
  let container = DOM.element('div', { style: `width:${width}px;height:${width/1.6}px` });
  
  yield container;
  
  // Did not use setView because we are using "fit bounds" to get the polygons to determine this
  let map = L.map(container);

  //add base layer
  let baseLayer = L.tileLayer(cartoLight, {
   attribution: cartoAttr,
    subdomains: 'abcd',
    maxZoom: 20,
    minZoom: 0
  }).addTo(map); 

  //geoMarker obj
  let geojsonMarkerOptions = {
    radius: 5,
    fillColor: "#ff7800",
    color: "#ff7800",
    weight: 1,
    opacity: 1,
    fillOpacity: 0.6
  };

  //passing a pointToLayer function in a GeoJSON options object when creating the GeoJSON layer. 
  //This function is passed a LatLng and should return an instance of ILayer, in this case likely a Marker or CircleMarker.
  //we use arrow notation here, but this essentially is the same as using an anonymous function like so: function (feature, latlng){...return stuff}
  let VanAreasLayer = L.geoJSON(newplayers, {
      pointToLayer: (feature, latlng) => {
        return L.circleMarker(latlng, geojsonMarkerOptions);
    }})
  .bindPopup(function (Layer) { 
    return Layer.feature.properties.nom + '<br> Selections: ' + Layer.feature.properties.matchs+ '<br> Lieu de naissance: ' + Layer.feature.properties.city; 
  })  
  .addTo(map);


  //finds bounds of polygon and automatically gets map view to fit
  map.fitBounds(VanAreasLayer.getBounds()); 
  
}
```

<br>

```{ojs}
data1 = geo.table(newplayers)


Plot.plot({
  marginYop: 500,
  marginLeft: 200,
  marginBottom: 100,
  x: {
  label: "Nombre d'internationaux", 
  axis: "top",
  tickRotate: 0
  },
  y: {
  label: "Lieu de naissance",
  grid: true
  },
  marks: [
      Plot.barX(data1, Plot.groupY({x: "count"}, {y: "city", sort: {y: "x", reverse: true}})),

    Plot.ruleY([0])
  ]
})



```
