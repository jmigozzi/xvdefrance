---
title: "Géographie du XV de France"
subtitle: "Les Bleus, une équipe du monde entier"
author: "Julien Migozzi"
institute: "University of Oxford"
format:
  html:
    echo: false
editor: visual
---

D'où viennent les joueurs du XV de France ?

Cette carte visualise tous les joueurs qui ont porté le maillot du XV de France selon leur lieu de naissance et la date de leur première sélection, de 1906 à 2023. Sur ces 1165 internationaux, 1107 ont pu être cartographiés en utilisant les données de [Wikipedia](https://fr.wikipedia.org/wiki/Liste_des_s%C3%A9lectionn%C3%A9s_en_%C3%A9quipe_de_France_de_rugby_%C3%A0_XV). 

Trois tableaux recensent le nombre d'internationaux pour chaque lieu de naissance, selon la période choisie, à l'échelle des villes, régions ou pays.

Plusieurs clés de lectures apparaissent : 

- un recrutement international dès l'origine du XV de France (Russie, Angleterre, Argentine etc.) ;
- le poids historique du Sud-Ouest (Pyrénées-Atlantiques, Haute-Garonne etc.), mais aussi celui de Paris, 2e ville après Toulouse ;
- les héritages coloniaux de la présence française, notamment en Afrique (Algérie, Cameroun, Côte d'Ivoire etc.) ou en Océanie (Nouvelle-Calédonie, Wallis et Futuna) ; 
- le rôle majeur des petites villes et bourgades jusque dans les années 1990 ;
- la métropolisation du recrutement des joueurs, qui proviennent de plus en plus des grandes villes ces 20 dernières années ; 
- la professionnalisation du rugby, qui entraine l'arrivée de joueurs en provenance d'Afrique du Sud (2e pays le plus représenté) ou de Nouvelle-Zélande.



Ce site n'est qu'une petite ébauche : en attendant quelques améliorations, bonne exploration  !



```{r}
#| echo: false
#| warning: false
#| message: false

library(sf)
library(tidyverse)
xv <- st_read(here::here("data/xvdefrance.gpkg"),  quiet = TRUE)
xv$first_year <- as.numeric(format(xv$first_selection,'%Y'))

xv <-  xv %>% 
   st_jitter(factor = 0.00002) # avoid overlapping of points


library(geojsonsf)
ojs_define(xv_str = sf_geojson(xv))

```


```{ojs}
//| echo: false
players = JSON.parse(xv_str) 
import {view} from "@neocartocnrs/geoverview"
geo = require("geotoolbox@latest")
bertin = require("bertin")
cartoLight = "https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}@2x.png"
cartoAttr = `&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, &copy; <a href="https://carto.com/attributions">CARTO</a>`

import {interval} from '@mootari/range-slider' 

viewof period = interval([1906, 2023], {
  step: 1,
  min: 1906,
  max: 2023,
  value: [1906, 2023],
  label: 'Période de la première sélection',
})


newplayers = geo.filter(players, (d) => d.first_year >= period[0] &
d.first_year <= period[1])


VanCirclePlayersMap = {

  let width = 700;
  let container = DOM.element('div', { style: `width:${width}px;height:${width/1.6}px` });
  
  yield container;
  
  // Did not use setView because we are using "fit bounds" to get the polygons to determine this
  let map = L.map(container);

  //add base layer
  let baseLayer = L.tileLayer(cartoLight, {
   attribution: cartoAttr,
    subdomains: 'abcd',
    maxZoom: 20,
    minZoom: 0
  }).addTo(map); 

  //geoMarker obj
  let geojsonMarkerOptions = {
    radius: 4,
    fillColor: "#ff7800",
    color: "#ff7800",
    weight: 1,
    opacity: 1,
    fillOpacity: 0.6
  };

  //passing a pointToLayer function in a GeoJSON options object when creating the GeoJSON layer. 
  //This function is passed a LatLng and should return an instance of ILayer, in this case likely a Marker or CircleMarker.
  //we use arrow notation here, but this essentially is the same as using an anonymous function like so: function (feature, latlng){...return stuff}
  let VanAreasLayer = L.geoJSON(newplayers, {
      pointToLayer: (feature, latlng) => {
        return L.circleMarker(latlng, geojsonMarkerOptions);
    }})
  .bindPopup(function (Layer) { 
    return Layer.feature.properties.nom + '<br> Sélections: ' + Layer.feature.properties.matchs+ '<br> Lieu de naissance: ' + Layer.feature.properties.city +'<br> Premier match' +  Layer.feature.properties.premiere_selection + '<br> Naissance: ' + Layer.feature.properties.dob; 
  })  
  .addTo(map);


  //finds bounds of polygon and automatically gets map view to fit
  map.fitBounds(VanAreasLayer.getBounds()); 
  
}
```

<br>


```{ojs}
data1 = geo.table(newplayers)

extract = geo.filter(newplayers, (d) => d.country != "France")
data2 = geo.table(extract)

Plot.plot({
  width: 800,
  height: 500,
  marginTop: 50,
  marginLeft: 100,
  marginBottom: 100,
  x: {
  label: "Pays de naissance (hors France)", 
  axis: "top",
  tip: true,
  tickRotate: 0
  },
  y: {
  label: "",
  grid: true
  },
  marks: [
      Plot.barX(data2, Plot.groupY({x: "count"}, {y: "country", sort: {y: "x", reverse: true}})),

    Plot.ruleY([0])
  ]
})


Plot.plot({
  width: 1200,
  height: 1500,
  marginTop: 50,
  marginLeft: 100,
  marginBottom: 100,
  x: {
  label: "Région de naissance", 
  axis: "top",
  tickRotate: 0
  },
  y: {
  label: "",
  grid: true
  },
  marks: [
      Plot.barX(data1, Plot.groupY({x: "count"}, {y: "region", sort: {y: "x", reverse: true}})),
    Plot.ruleY([0])
  ],
  tip: true
})


Plot.plot({
  width: 1200,
  height: 4000,
  marginTop: 50,
  marginLeft: 100,
  marginBottom: 100,
  x: {
  label: "Lieu de naissance", 
  axis: "top",
  tickRotate: 0
  },
  y: {
  label: "Lieu de naissance",
  grid: true
  },
  marks: [
      Plot.barX(data1, Plot.groupY({x: "count"}, {y: "city", sort: {y: "x", reverse: true}})),

    Plot.ruleY([0])
  ]
})

```
